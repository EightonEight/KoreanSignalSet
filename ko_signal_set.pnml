/*------------------------------------------------------------------------------
 * 한국 신호기 세트(Korean Signal Set)
 * https://github.com/KoreanGRF/KoreanSignalSet
------------------------------------------------------------------------------*/

// Basic information of NewGRF
grf {
    grfid :                            "TK\06\03";
    name :                             string(STR_GRF_NAME_WITH_VER);
    desc :                             string(STR_GRF_DESC);
    url :                              string(STR_GRF_URL);
    version :                          3;
    min_compatible_version :           1;
    
    param 1 {
        // is Realistic
        is_realistic {
            type: bool;
            name: string(STR_PARAM_IS_REALISTIC_NAME);
            desc: string(STR_PARAM_IS_REALISTIC_DESC);
            bit: 0;
            def_value: 1;
        }
        
        // Use TVM
        use_tvm {
            type: bool;
            name: string(STR_PARAM_USE_TVM_NAME);
            desc: string(STR_PARAM_USE_TVM_DESC);
            bit: 2;
            def_value: 1;
        }
        
        // Use caution signals(Y and YG) together
        use_caution_signal {
            type: bool;
            name: string(STR_PARAM_USE_CAUTION_SIGNALS_NAME);
            desc: string(STR_PARAM_USE_CAUTION_SIGNALS_DESC);
            bit: 3;
            def_value: 1;
        }
    }

    // Use blue signal as open state
    param 2 {
        // for Block signal
        use_blue_block {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_BLOCK_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_BLOCK_DESC);
            bit: 0;
            def_value: 0;
        }

        // for Entrance signal
        use_blue_entry {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_ENTRY_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_ENTRY_DESC);
            bit: 1;
            def_value: 0;
        }

        // for Exit signal
        use_blue_exit {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_EXIT_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_EXIT_DESC);
            bit: 2;
            def_value: 0;
        }

        // for Combo signal
        use_blue_combo {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_COMBO_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_COMBO_DESC);
            bit: 3;
            def_value: 0;
        }
        
        // for path signal
        use_blue_path {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_PATH_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_PATH_DESC);
            bit: 4;
            def_value: 0;
        }
        
        // for Oneway path signal
        use_blue_oneway_path {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_ONEWAY_PATH_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_ONEWAY_PATH_DESC);
            bit: 5;
            def_value: 0;
        }
        
        // for programmable signal
        use_blue_programmable {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_PROGRAMMABLE_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_PROGRAMMABLE_DESC);
            bit: 6;
            def_value: 0;
        }
    }
}

// GUI
#include "./src/gui/gui.pnml"

// Replace blocks for electric/semaphore signals (automatically generated by ./src/electric.py)
// #include "./generated/replace_blocks.pnml"

// Semaphore signals
#include "./src/semaphore.pnml"

// Electric signals
#include "./src/electric.pnml"

// Programmable signals
#include "./src/programmable.pnml"
