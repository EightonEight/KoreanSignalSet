/*------------------------------------------------------------------------------
 * 한국 신호기 세트(Korean Signal Set)
 * https://github.com/KoreanGRF/KoreanSignalSet
------------------------------------------------------------------------------*/

// Basic information of NewGRF
grf {
    grfid :                            "TK\06\03";
    name :                             string(STR_GRF_NAME_WITH_VER);
    desc :                             string(STR_GRF_DESC);
    url :                              string(STR_GRF_URL);
    version :                          1210;
    min_compatible_version :           1;

    param 1 {
        // is Realistic
        is_realistic {
            type: bool;
            name: string(STR_PARAM_IS_REALISTIC_NAME);
            desc: string(STR_PARAM_IS_REALISTIC_DESC);
            bit: 0;
            def_value: 1;
        }

        // Use TVM
        use_tvm {
            type: bool;
            name: string(STR_PARAM_USE_TVM_NAME);
            desc: string(STR_PARAM_USE_TVM_DESC);
            bit: 2;
            def_value: 1;
        }

        // Use caution signals(Y and YG) together
        use_caution_signal {
            type: bool;
            name: string(STR_PARAM_USE_CAUTION_SIGNALS_NAME);
            desc: string(STR_PARAM_USE_CAUTION_SIGNALS_DESC);
            bit: 3;
            def_value: 1;
        }

        // Recolouring signals as blue poles if they have a route restriction program
        use_routing_restriction {
            type: bool;
            name: string(STR_PARAM_USE_ROUTING_RESTRICTION_NAME);
            desc: string(STR_PARAM_USE_ROUTING_RESTRICTION_DESC);
            bit: 4;
            def_value: 1;
        }
    }

    // Use blue signal as open state
    param 2 {
        // for Block signal
        use_blue_block {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_BLOCK_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_BLOCK_DESC);
            bit: 0;
            def_value: 0;
        }

        // for Entrance signal
        use_blue_entry {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_ENTRY_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_ENTRY_DESC);
            bit: 1;
            def_value: 0;
        }

        // for Exit signal
        use_blue_exit {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_EXIT_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_EXIT_DESC);
            bit: 2;
            def_value: 0;
        }

        // for Combo signal
        use_blue_combo {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_COMBO_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_COMBO_DESC);
            bit: 3;
            def_value: 0;
        }

        // for path signal
        use_blue_path {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_PATH_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_PATH_DESC);
            bit: 4;
            def_value: 0;
        }

        // for Oneway path signal
        use_blue_oneway_path {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_ONEWAY_PATH_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_ONEWAY_PATH_DESC);
            bit: 5;
            def_value: 0;
        }

        // for programmable signal
        use_blue_programmable {
            type: bool;
            name: string(STR_PARAM_USE_BLUE_AS_OPEN_PROGRAMMABLE_NAME);
            desc: string(STR_PARAM_USE_BLUE_AS_OPEN_PROGRAMMABLE_DESC);
            bit: 6;
            def_value: 0;
        }
    }
/*
    // Force TVM signal side
    param 3 {
        force_tvm_signal_side {
            type: int;
            name: string(STR_PARAM_FORCE_TVM_SIGNAL_SIDE_NAME);
            desc: string(STR_PARAM_FORCE_TVM_SIGNAL_SIDE_DESC);
            min_value: 0;
            max_value: 2;
            def_value: 0;
            names: {
                0: string(STR_PARAM_TVM_SIGNAL_SIDE_TRAFFIC_SIDE);
                1: string(STR_PARAM_TVM_SIGNAL_SIDE_LEFT_SIDE);
                2: string(STR_PARAM_TVM_SIGNAL_SIDE_RIGHT_SIDE);
            };
        }
    }
*/
}

// Notice
if (!extended_feature_test("action3_signals_custom_signal_sprites")) {
	error(NOTICE, string(STR_UNSUPPORTED_VERSION));
}

// GUI
#include "./src/gui/gui.pnml"

// Semaphore signals
#include "./src/semaphore.pnml"

// Electric signals
#include "./src/electric.pnml"

param[10] = reserve_sprites(1);
replace (param[10]) {
    // No recolouring
    recolour_sprite {
        0x84: 0x84;
        0x85: 0x85;
        0x86: 0x86;
    }

    // Recolouring for blue poles
    recolour_sprite {
        0x84: 0xC8;
        0x85: 0xCA;
        0x86: 0xCC;
    }
}

// General signal switches
switch (FEAT_SIGNALS, SELF, sw_signal_types, [
    STORE_TEMP(param[10] + (hasbit(extra_callback_info2, 24) ? 1 : 0), 0x100),
    ((extra_callback_info2 & 0x00FFFF00) | signal_style)
]) {
    // Signals
    0x00000: sw_signal_block;        // Block
    0x10000: sw_signal_entry;        // Entry
    0x20000: sw_signal_exit;         // Exit
    0x30000: sw_signal_combo;        // Combo
    0x40000: sw_signal_path;         // Path
    0x50000: sw_signal_oneway_path;  // Oneway path
    0x60000: sw_signal_programmable; // Programmable
    0x70000: sw_signal_noentry;      // No-entry
/*
    // (Reserved) Shunt
    0x00001: sw_shunt_block;        // Block
    0x10001: sw_shunt_entry;        // Entry
    0x20001: sw_shunt_exit;         // Exit
    0x30001: sw_shunt_combo;        // Combo
    0x40001: sw_shunt_path;         // Path
    0x50001: sw_shunt_oneway_path;  // Oneway path
    0x60001: sw_shunt_programmable; // Programmable
    0x70001: sw_shunt_noentry;      // No-entry
*/
    CB_FAILED;
}

// Item
item (FEAT_SIGNALS, ko_signal_set, 0) {
    property {
        enable_restricted_signals: use_routing_restriction;
        enable_signal_recolour: 1;
        enable_no_entry_signals: 1;
        extra_aspects: 3;
    }

    graphics {
        sw_signal_types;
    }
}
